{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2b0cf2e3-fa4b-4aaa-9c18-c9fee208111a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aleksandra/Documents/hackathon/knum_venv/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "from torchvision import transforms\n",
    "from PIL import Image\n",
    "import os\n",
    "import pandas as pd\n",
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d223a10e-8516-4aa9-86d2-5e7ff1395232",
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_in_data(dir_str, ref_json):\n",
    "\n",
    "    id_to_img = {}\n",
    "    df = pd.DataFrame(columns=['id', 'image_id', 'bbox', 'category_id', 'img'])\n",
    "\n",
    "    for line in ref_json[\"images\"]:\n",
    "        filename = line[\"file_name\"]\n",
    "        img = Image.open(dir_str + \"/\" + filename)\n",
    "        id_to_img[line[\"id\"]] = img\n",
    "\n",
    "    for box in ref_json[\"annotations\"]:\n",
    "        box_coords = box[\"bbox\"]\n",
    "        # im1 = im.crop((left, top, right, bottom))\n",
    "        # [lewy górny róg, szerokość, wysokość]\n",
    "        box_coords = [box_coords[0], box_coords[1], box_coords[0] + box_coords[2], box_coords[1] + box_coords[3]]\n",
    "        \n",
    "        image = id_to_img[box[\"image_id\"]].crop(box_coords)\n",
    "        if len(image.getbands()) > 3:\n",
    "            image_ = Image.new(\"RGB\", image.size, (255, 255, 255))\n",
    "            image_.paste(image, mask=image.split()[3]) \n",
    "        else:\n",
    "            image_ = image\n",
    "\n",
    "        box[\"img\"] = image_\n",
    "        df.loc[box[\"id\"]] = box\n",
    "\n",
    "\n",
    "    df.set_index(\"id\")\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "474ffc15-7c1f-49fc-9ed8-152bd1c48b7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"../public_dataset/reference_images_part1.json\") as f:\n",
    "    ref_json = json.load(f)\n",
    "\n",
    "dir_str = \"../public_dataset/reference_images_part1\"\n",
    "df = read_in_data(dir_str, ref_json)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bc18912-bc94-4498-943c-cbde88732795",
   "metadata": {},
   "outputs": [],
   "source": [
    "# h_max = 0\n",
    "# w_max = 0\n",
    "\n",
    "# for img in df.img:\n",
    "#     h,w = img.size\n",
    "#     h_max = max(h, h_max)\n",
    "#     w_max = max(w, w_max)\n",
    "    \n",
    "# print(h_max, w_max)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "613731e6-c0e0-42d2-951b-8ff6087789d8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eac1b9b1-9d94-466c-855e-91ccbc9d686a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "KNUM hackathon",
   "language": "python",
   "name": "myenv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
